# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main", "develop", "feature/setup-cicd" ]
  pull_request:
    branches: [ "main", "develop", "feature/setup-cicd" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
env:
  HELM_DEPLOY_NAME: smartdev-handbook
  IMAGE_REPO: 0000000000.dkr.ecr.ap-southeast-1.amazonaws.com/smartdev-handbook
  IMAGE_HOST: 0000000000.dkr.ecr.ap-southeast-1.amazonaws.com
  IMAGE_NAME: smartdev-handbook
  AWS_DEFAULT_REGION: ap-southeast-1
  AWS_SECRET_ACCESS_KEY: wwwwwwwwwwwwwwwwwwwww
  AWS_ACCESS_KEY_ID: wwwwwwwwwwwwww
  KUBE_CONFIG_NAMESPACE: smartdev-handbook
  KUBE_CONFIG_CERTIFICATE: wwwwwwwwwwwwwwwwwww
  KUBE_CONFIG_TOKEN: wwwwwwwwwwwwwwwwwwwwwww
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: push ECR
        run: |
          docker build --file Dockerfile --tag smartdev-handbook .
          export VERSION=$GITHUB_RUN_NUMBER
          sh ./deployment/install.sh
          docker tag $IMAGE_NAME $IMAGE_REPO:${VERSION}
          docker push $IMAGE_REPO:${VERSION}

      # Runs a set of commands using the runners shell
      - name: install in K8s
        run: |
          export KUBE_NAMESPACE=$KUBE_CONFIG_NAMESPACE
          export KUBE_TOKEN=$KUBE_CONFIG_TOKEN
          export KUBE_CERTIFICATE=$KUBE_CONFIG_CERTIFICATE
          export HELM_PACKAGE=./deployment/helm/$HELM_DEPLOY_NAME
          envsubst < ./deployment/kubeconfig > ~/.kube/config
          helm upgrade --install --set image.tag=${VERSION} $HELM_DEPLOY_NAME ${HELM_PACKAGE}

#1 change $NAME_SPACE to your name you want
#2 change $YOUR_DOMAIN to your domain you want
#3 run: kubectl apply -f wordpress-deploy-one-file.yaml
#4 wait for 5-10min
#5 check your public domain and make sure that is running successfully! --> https://$YOUR_DOMAIN.dev.smartdev.dev
#6 when finish and you don't need to use this test anymore, we have to remove this test cause of the save the money: kubectl delete -f wordpress-deploy-one-file.yaml

apiVersion: v1
kind: Namespace
metadata:
  name: $NAME_SPACE
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress-mysql
  labels:
    app: wordpress
  namespace: $NAME_SPACE
spec:
  ports:
    - port: 3306
  selector:
    app: wordpress
    tier: mysql
  clusterIP: None
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
  labels:
    app: wordpress
  namespace: $NAME_SPACE
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress-mysql
  labels:
    app: wordpress
  namespace: $NAME_SPACE
spec:
  selector:
    matchLabels:
      app: wordpress
      tier: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: wordpress
        tier: mysql
    spec:
      containers:
      - image: mysql:5.6
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: supersecret
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  labels:
    app: wordpress
  namespace: $NAME_SPACE
spec:
  ports:
    - port: 80
  selector:
    app: wordpress
    tier: frontend
  type: LoadBalancer
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wp-pv-claim
  labels:
    app: wordpress
  namespace: $NAME_SPACE
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  labels:
    app: wordpress
  namespace: $NAME_SPACE
spec:
  selector:
    matchLabels:
      app: wordpress
      tier: frontend
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: wordpress
        tier: frontend
    spec:
      containers:
      - image: wordpress:4.8-apache
        name: wordpress
        env:
        - name: WORDPRESS_DB_HOST
          value: wordpress-mysql
        - name: WORDPRESS_DB_PASSWORD
          value: supersecret
        ports:
        - containerPort: 80
          name: wordpress
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wp-pv-claim
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: test-velero-tls
  namespace: $NAME_SPACE
spec:
  secretName: test-velero-tls
  commonName: $YOUR_DOMAIN.dev.smartdev.dev
  dnsNames:
  - $YOUR_DOMAIN.dev.smartdev.dev
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: test-velero-ingress
  namespace: $NAME_SPACE
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
  - host: $YOUR_DOMAIN.dev.smartdev.dev
    http:
      paths:
      - pathType: Prefix
        path: /
        backend:
          service:
            name: wordpress
            port:
              number: 80
  tls:
  - hosts:
    - $YOUR_DOMAIN.dev.smartdev.dev
    secretName: test-velero-tls
